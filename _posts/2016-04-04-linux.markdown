---
layout: post
title:  "linux"
date:   2016-04-04 21:35:35 +0800
categories: command
---

## linux属性
```
# 查看linux版本
lsb_release -a

# 换源
/etc/apt/sources.list
```

## 用户权限

```
# user添加到groupA用户组
usermod -aG groupA user

# 锁定newuser1
usermod -L newuser1

# 解除对newuser1的锁定
usermod -U newuser1

# 踢掉用户
pkill -kill -t tty

# 显示文件最后5行内容
tail -n 5 test.log

# 循环查看文件内容
tail -f test.log

# 查看特定行内容
sed -n 5p output.txt

# 添加用户
sudo adduser user1

# 删除用户
sudo userdel username

# 添加用户到sudo组
adduser username sudo

# 追加用户到sudo组
sudo  usermod -aG sudo username

# 将用户从sudo组删除，并添加到其他组
sudo usermod -G 用户组名  用户名

# 添加环境变量
export PATH="/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:$PATH"

# 改变文件拥有者和群组
chown root: log2012.log

# 查看用户所在组
groups user1

# 修改密码
sudo passwd user

# 查看用户在线情况
who

# 查看自己是哪个终端
who am i

# 单向发送消息
write root pts/20
Hello, World!
Ctrl+d #发送并退出

# 群发消息
wall "hello, world!"

```

## 进程管理
```
# 查看进程
ps -ef |grep vsftpd

# 查看服务
service vsftpd

# list stystem opened files，列出系统中打开的所有文件，因为linux上一切都是文件
# 查看端口
lsof -i:80
# 查看程序打开了那些文件
lsof -p 7876
```


## ubuntu apt

```
# list the installed software packages on your machine 
sudo apt list --installed | grep -i gnome

# 清理安装gnome时候留下的缓存程序软件包
apt-get clean

# 删除gnome的相关配置文件
apt-get purge gnome

# 卸载掉gnome
sudo apt-get remove gnome
```

#### grep

```
find . -name "*.php" | xargs grep

# 只输出文件中匹配到的部分 -o
grep -o 'matchcontent=[]'
```

#### Find Linux Files by Name or Extension
```
find . -name "*.err"
```

#### finding out where a program is located
```
which firefox
```

#### network

```
# 启动以太网卡
ifconfig eth0 up
sudo /etc/init.d/networking restart

# 网络重启
sudo /etc/init.d/networking restart

# 查看所有路由
route -n

# 去除IP地址
ifconfig eh0 0.0.0.0

# 添加ip
ip addr add 目的/网关 dev eth0

# 添加路由
sudo ip route add 目的ip/netmask via 192.168.1.1

# ping4次
ping -c 4 google.com

# 修改查看本地路由表
route

# 添加一条路由信息
route add -net 10.10.10.0/24 gw 192.168.0.1

# 删除一条路由信息
route del -net 10.10.10.0/24 gw 192.168.0.1

# 添加默认网关
route add default gw 192.168.0.1

# 查看路由表
netstat -r

# 查看tcp链接
netstat -t

# 查看udp链接
netstat -u

# 查看对应进程信息
netstat -ltp

# 每隔5秒展示tcp监听信息
netstat -tl -c 5

# 展示网卡信息
netstat -i
```

#### tcpdump

```
# FILTERING BY SOURCE AND DESTINATION
tcpdump src 2.3.4.5
tcpdump dst 3.4.5.6

# FIND TRAFFIC BY IP
tcpdump host 1.2.3.4

# SHOW TRAFFIC RELATED TO A SPECIFIC PORT
tcpdump port 3389
tcpdump src port 1025
```

#### nc
```
# 将本地文件发送到远程服务器的80端口
nc 192.168.1.199 80 < data.txt

# 本地端口，将接收的数据重定向到本地文件
nc -l 8080 > data.txt
```

#### xargs
```
# 使用-I指定一个替换字符串{}，这个字符串在xargs扩展时会被替换掉
# 将上一个程序的标准输出传给下一个程序的命令行
echo xx | xargs -I {} command {}
```

#### dd

```
dd if=<source file name> of=<target file name> [Options]
```

#### 文件本地上传和下载
```
# 安装
sudo apt install lrzsz

# 上传
rz

# 下载
sz
```

#### 文件管理
```
# 统计挂载磁盘的整体情况
df -h

# 查看当前目录每个文件夹的情况
du --max-depth=1 -h
du -sh *

# 查看硬盘情况
fdisk -l

# Size of a directory
du -sh /tmp

# Size of a file
du -h /tmp/xyz

# 查询设备类型和文件系统
blkid
```

#### 解压压缩
```
#extract
tar -x
#if the tar file also compressed with .tar.gz or tgz extension
tar -z
tar -xvf file.tar
tar -zxvf data.tar.gz

# 打包
tar czvf FileName.tar DirName
zip FileName.zip DirName
```

#### tree
```
#Tee command is used to store and view (both at the same time) the output of any other command.
ls | tee file
```

#### 环境变量
```
vim .profile
export PATH=$PATH:/home/jeremie/Downloads/pycharm-community-2016.3.2/bin
source .profile

# 设置环境变量
export http_proxy="http://172.18.10.216:1080"

# 查看环境变量
echo $http_proxy

# 删除环境变量
unset http_proxy
```

#### crontab
```
sudo vim /etc/crontab
#每隔两分钟执行一次脚本
2 *   * * * root   /usr/bin/python3.5 /home/edgar/auto.py > /home/edgar/auto.log
# 分 时 日 月 周 用户 命令
* * * * * user command
# 每分钟执行一次
* * * * * user command
# 每隔2小时执行一次
* */2 * * * user command (/表示频率)
# 每天8:30分执行一次
30 8 * * * user command
# 每小时的30和50分各执行一次
30,50 * * * * user command（,表示并列）
# 每个月的3号到6号的8:30执行一次
30 8 3-6 * * user command （-表示范围）
# 每个星期一的8:30执行一次
30 8 * * 1 user command （周的范围为0-7,0和7代表周日）

```

#### nohup 确保这个进程在断开 ssh 连接后依旧运行，& 让进程在后台运行
```
nohup jupyter notebook &

# 后台文件写入log
command >& file.txt(或者file.log) &
```

#### 库的软链接指令速查
```
# locate 定位库的信息  
locate libcurl.so.4  

# ls -l  查看链接  
ls -l /usr/local/lib/libcurl.so.4  

# sudo rm -rf 删除软连接  
sudo rm -rf /usr/lib/x86_64-linux-gnu/libcurl.so.4  

# sudo ln -s 重建软连接  
sudo ln -s /home/anaconda2/lib/libcurl.so.4.4.0 /home/anaconda2/lib/libcurl.so.4  

# 文件夹软连接
ln -s /opt/linux/rootfs_dir  /home/jyg/rootfs_dir

# cmake --version 使用cmake时的链接库，如果有冲突则会报错。没有冲突，会输出版本信息  
cmake --version  
```

#### 文件挂载
```
#Type this command to list the devices that are accessible on the computer:
fdisk -l

# 挂载文件
mount /dev/cdrom /mnt/cdrom

# 取消挂载
umount /mnt/cdrom
```

#### 使用图形界面打开文件
```
# opens a file or URL in the user's preferred application
xdg-open $file
```

#### ss
```
# apt
apt-get install shadowsocks-libev

#pip
pip install shadowsocks

# 服务启动
ssserver -c /etc/shadowsocks.json --log-file=/tmp/shadowsocks.log

# 本地启动
sslocal -c /home/mudao/shadowsocks.json

# 配置文件
{
"server":"",  ##填写服务器外网ip地址，ip也可以写内网地址，只要能转发出来即可。
"server_port":8000,
"local_address":"127.0.0.1",
"local_port":1080,
"password":"",
"timeout":300,
"method":"aes-256-cfb",
"fast_open":false
}

# 后台运行
nohup ssserver -c /etc/shadowsocks.json > /dev/null 2>&1 & 
```

Privoxy
```
# install
sudo apt install privoxy

# 修改配置文件 
vim /etc/privoxy/config
listen-address 127.0.0.1:8118 #取消注释
forward-socks5t / 127.0.0.1:1080 #取消注释

# 启动privoxy
systemctl start privoxy

# 配置/etc/profile 添加http代理
export http_proxy=http://127.0.0.1:8118
export https_proxy=http://127.0.0.1:8118
export ftp_proxy=http://127.0.0.1:8118
```

tmux
```
# install
brew install tmux       # OSX
pacman -S tmux          # archlinux
apt-get install tmux    # Ubuntu
yum install tmux        # Centos

# prefix 前缀键
^b # ctrl+b

# 创建新session
tmux new -s myname

# 断开当前会话
tmux detach

# 查看session
tmux ls

# 利用session名称返回，进入之前的会话
tmux a -t myname 
tmux a # 默认进入第一个会话

# 关闭会话
tmux kill-session -t myname
tmux kill-server # 关闭所有会话

## window窗口：session 中可以有不同的 window（但是同时只能看到一个 window）
tmux new-window # 创建新的 window
tmux list-windows
tmux select-window -t:0-9 #根据索引跳转 window
tmux rename-window #重命名当前 window

## pane 面板：window中可以有不同的pane（可以把 window 分成不同的部分）
tmux split-window #将window垂直划分为两个pane
tmux split-window -h #将window水平划分为两个pane
tmux swap-pane -[UDLR] #在指定方向交换pane
tmux select-pane -[UDLR] #指定方向选择下一个pane 

# 修改prefix键
# ~/.tmux.conf
unbing ^b
set -g prefix 'C-a'

# 基本操作
?	#列出所有快捷键；按q返回
d 	#脱离当前会话,可暂时返回Shell界面
s 	#选择并切换会话；在同时开启了多个会话时使用
D 	#选择要脱离的会话；在同时开启了多个会话时使用
: 	#进入命令行模式；此时可输入支持的命令，例如 kill-server 关闭所有tmux会话
[ 	#复制模式，光标移动到复制内容位置，空格键开始，方向键选择复制，回车确认，q/Esc退出
] 	#进入粘贴模式，粘贴之前复制的内容，按q/Esc退出
~ 	#列出提示信息缓存；其中包含了之前tmux返回的各种提示信息
t 	#显示当前的时间
ctrl + z 挂起当前会话

# 窗口操作
c 	#创建新窗口
& 	#关闭当前窗口
[0-9] 	#数字键切换到指定窗口
p 	#切换至上一窗口
n 	#切换至下一窗口
l 	#前后窗口间互相切换
w 	#通过窗口列表切换窗口
, 	#重命名当前窗口，便于识别
. 	#修改当前窗口编号，相当于重新排序
f 	#在所有窗口中查找关键词，便于窗口多了切换

# 面板操作
" 		#将当前面板上下分屏
% 		#将当前面板左右分屏
x 		#关闭当前分屏
! 		#将当前面板置于新窗口,即新建一个窗口,其中仅包含当前面板
ctrl+方向键 #以1个单元格为单位移动边缘以调整当前面板大小
alt+方向键 	#以5个单元格为单位移动边缘以调整当前面板大小
q 		#显示面板编号
o 		#选择当前窗口中下一个面板
方向键 	#移动光标选择对应面板
<space> # 切换 Pane 布局
{ 		#向前置换当前面板
} 		#向后置换当前面板
z 		#最大化当前所在面板
page up #向上滚动屏幕，q 退出
page down #向下滚动屏幕，q 退出
```
