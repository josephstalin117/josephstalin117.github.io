---
layout: post
title:  "git"
date:   2016-06-03 16:35:35 +0800
categories: command
---

初始化本地git仓库（创建新仓库）

```
git init
```

基本配置

```
# 配置用户名
git config --global user.name "xxx"

# 配置邮件
git config --global user.email "xxx@xxx.com"

# 生成ssh-key
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

# 查看git config的设置
git config --list

# 全局配置文件
~/.gitconfig

```

版本提交

```
# 添加远端配置
git remote add origin git@github.com:josephstalin117/time_series_forecast.git

# 取回远程仓库的变化，并与本地分支合并
git pull [remote] [branch]

#添加指定文件到暂存区
git add [file1] [file2] ...

# 提交暂存区到仓库区
git commit -m [message]

# 提交暂存区的指定文件到仓库区
git commit [file1] [file2] ... -m [message]

# 上传本地指定分支到远程仓库
git push [remote] [branch]
git push origin master

```

版本控制

```
# 撤销文件a的修改(没有被git add)
git checkout a

# 撤销文件a的修改(已经被git add，但没有commit)
git reset HEAD a
git checkout a

# 撤销文件a的修改(已经被commit)
git reset HEAD^
git checkout a

# 回退到指定版本
git reset --hard 3628164

# 回退到上一版本
git reset --hard HEAD^

# 单个文件恢复之前的版本
git reset 版本号 filename

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
git reset [commit]

# 新建一个commit，用来撤销指定commit，后者的所有变化都将被前者抵消，并且应用到当前分支
git revert [commit]

# 改名文件，并且将这个改名放入暂存区
git mv [file-original] [file-renamed]

# 删除工作区文件，并且将这次删除放入暂存区
git rm [file1] [file2] ...

#从暂存区删除，但该文件会保留在工作区
git rm --cached [file]

#显示当前分支的版本历史
git log
```

# 文件对比
```
#显示工作区与当前分支最新commit之间的差异
git diff HEAD [filename]

#显示工作区与比较上次的提交
git diff HEAD^ [filename]

#比较暂存区与最新本地版本库
git diff --cached [filename]

#显示暂存区和工作区的差异
git diff [file]

#查看工作目录同Git仓库指定 commit 的内容的差异
git diff [commit] [filename]

#git diff 不输出的处理
git --no-pager diff
git config --global core.pager 'less'
```

查看记录

```
#显示文件的历史修改
git log -p [filename]
git log --graph

#查看提交记录
git log [filename]

#显示提交的记录
git log —pretty=oneline [filename]

#查看某次提交中的某个文件变化
git show 999e31080f96c29d84e11a82e87bfa175976fe0e [filename]
```

代理
```
git config --global https.proxy http://127.0.0.1:1080

git config --global https.proxy https://127.0.0.1:1080

git config --global --unset http.proxy

git config --global --unset https.proxy

```

分支管理
```
# 创建分支
git branch <branchname>

# 显示分支列表
git branch

# 切换分支
git checkout <branchname>

# 创建分支并切换
git checkout -b <branch>

# 合并分支
## 先切换master分支
git checkout master
## 合并分支
git merge <branch>

# 删除分支
git branch -d <branchname>
```
