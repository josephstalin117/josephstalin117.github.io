---
layout: post
title:  "python"
date:   2017-08-10 20:35:35 +0800
categories: command
---


python2 编码修改
```
def to_unicode(unicode_or_str):
    ''' 将str字符串转换为unicode类型
    '''
    if isinstance(unicode_or_str, str):
        value = unicode_or_str.decode('utf-8')
    else:
        value = unicode_or_str
    return value

def to_str(unicode_or_str):
    ''' 将unicode字符串转换为str类型
    '''
    if isinstance(unicode_or_str, unicode):
        value = unicode_or_str.encode('utf-8')
    else:
        value = unicode_or_str
    return value    
```

Functions
```
def sign(x):
    if x > 0:
        return 'positive'
    elif x < 0:
        return 'negative'
    else:
        return 'zero'

for x in [-1, 0, 1]:
    print(sign(x))
# Prints "negative", "zero", "positive"

```
range
```
range(start, stop, step)
```


Extended Slices
```
L = range(10)
# [0, 2, 4, 6, 8]
L[::2]

s='abcd'
# 'ac'
s[::2]
#'dcba'
s[::-1]

a = range(3)
#[0, 1, 2]
a
a[1:3] = [4, 5, 6]
# [0, 4, 5, 6]
a

a=range(10)
#[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
a
#[0, 1, 2, 3, 4, 5, 6, 7, 8]
a[:-1]
```

SimpleServer
```
python -m http.server 8080
```

Classes
```
class Greeter(object):

    # Constructor
    def __init__(self, name):
        self.name = name  # Create an instance variable

    # Instance method
    def greet(self, loud=False):
        if loud:
            print('HELLO, %s!' % self.name.upper())
        else:
            print('Hello, %s' % self.name)

g = Greeter('Fred')  # Construct an instance of the Greeter class
g.greet()            # Call an instance method; prints "Hello, Fred"
g.greet(loud=True)   # Call an instance method; prints "HELLO, FRED!"
```

python 执行bash命令
```
os.system("some_command with args")
```

python 默认执行
```
if __name__ == '__main__':
```

List comprehensions can also contain conditions:
```
nums = [0, 1, 2, 3, 4]
even_squares = [x ** 2 for x in nums if x % 2 == 0]
print(even_squares)  # Prints "[0, 4, 16]"
```

zip() in conjunction with the * operator can be used to unzip a list:
```
>>> x = [1, 2, 3]
>>> y = [4, 5, 6]
>>> zipped = zip(x, y)
>>> list(zipped)
[(1, 4), (2, 5), (3, 6)]
>>> x2, y2 = zip(*zip(x, y))
>>> x == list(x2) and y == list(y2)
True
```

lambda
```
# Program to double each item in a list using map()

my_list = [1, 5, 4, 6, 8, 11, 3, 12]

new_list = list(map(lambda x: x * 2 , my_list))

# Output: [2, 10, 8, 12, 16, 22, 6, 24]
print(new_list)

```

map
```
#Map applies a function to all the items in an input_list.
map(function_to_apply, list_of_inputs)

items = [1, 2, 3, 4, 5]
squared = list(map(lambda x: x**2, items))

#Most of the times we use lambdas with map so I did the same. Instead of a list of inputs we can even have a list of functions!
def multiply(x):
    return (x*x)
def add(x):
    return (x+x)

funcs = [multiply, add]
for i in range(5):
    value = list(map(lambda x: x(i), funcs))
    print(value)

# Output:
# [0, 0]
# [1, 2]
# [4, 4]
# [9, 6]
# [16, 8]
```

anaconda2
```
# Create a conda environment named tensorflow to run a version of Python by invoking the following command:
conda create -n tensorflow pip python=2.7

# remove conda environment
conda remove -n tensorflow --all

# Activate the conda environment by issuing the following command:
source activate tensorflow

# win activate
activate tensorflow

# deactivate
source deactivate

# 列出所有环境
conda info --envs

# 换源
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
conda config --set show_channel_urls yes
```

pip
```
# 列出已安装的包
pip freeze or pip list

# 安装
pip install <包名> or pip install -r requirements.txt

# 卸载包
pip uninstall <包名> 或 pip uninstall -r requirements.txt

# 升级包
pip install -U <包名>

# 显示包所在的目录
pip show -f <包名>

# 搜索包
pip search <搜索关键字>

# 换源
pip install -i https://pypi.tuna.tsinghua.edu.cn/simple <包名>
```

jupyter
```
# 添加核
source activate <tensorflow>
pip install ipykernel

# list kernel
jupyter kernelspec list

# add kernel(处于想添加kernel的环境中)
python -m ipykernel install --name <tensorflow> --user

# remove kernel
jupyter kernelspec remove <kernelname>

# 生成配置文件
jupyter notebook --generate-config

# 生成密码
jupyter notebook password

# 修改文件

# 外网可访问
c.NotebookApp.ip='*'
c.NotebookApp.password = u'sha:ce...刚才复制的那个密文'
c.NotebookApp.open_browser = False
c.NotebookApp.port =8888 #可自行指定一个端口, 访问时使用该端口

# 后台挂起
nohup jupyter notebook > jupyter.log &
```

yield
```
def createGenerator():
    mylist = range(3)
    for i in mylist:
        yield i*i

# create a generator
mygenerator = createGenerator()

# mygenerator is an object!
print(mygenerator)
# <generator object createGenerator at 0xb7555c34>

for i in mygenerator:
    print(i)
# 0
# 1
# 4
```

itertools
```
import itertools

# groupby1
groups = []
uniquekeys = []
data = sorted(data, key=keyfunc)
for k, g in groupby(data, keyfunc):
    groups.append(list(g))      # Store group iterator as a list
    uniquekeys.append(k)

# groupby2
for (uid, group) in itertools.groupby(iter([(yield line.strip().split('\t')) for line in sys.stdin]),lambda item: item[0]):
    try:
        if not uid or len(uid) > 20 or uid == 'null':
            continue
    except:
        continue
```

enumerate
```
for counter, value in enumerate(some_list):
    print(counter, value)
```

path
```
os.path.join('/home/build/test/sandboxes/', todaystr, '/new_sandbox/')

# create dir if not exist
import os
if not os.path.exists(directory):
    os.makedirs(directory)

# 列出文件夹中的文件
for filename in os.listdir(csv_dir):
	if filename.endswith(".csv"):
		filenames.append(filename)
            continue
        else:
            continue

# 合并文件
with open(target_file, 'w', encoding='UTF-8') as outfile:
	for fname in filenames:
    	with open(csv_dir+fname, encoding='UTF-8') as infile:
            for line in infile:
                outfile.write(line)
```

file io
```
#'a' is for append, or use
#'w' to write with truncation
#'r' to read the content of the file
with open('somefile.txt', 'a', encoding='UTF-8') as the_file:
    the_file.write('Hello\n')

# return the 5 first characters of the file
f.read(5)

# return one line of the file
print(f.readline())

# looping through the lines of the file
for x in f:
	print(x)

# or
f = open('myfile', 'w', encoding='UTF-8')
f.write('hi there\n')  # python will convert \n to os.linesep
f.close()  # you can omit in most cases as the destructor will call it

# create file
f = open("myfile.txt", "x")
```

date
```
import datetime

x = datetime.datetime.now()

# 2020-05-17 00:00:00
x = datetime.datetime(2020, 5, 17)

x = datetime.datetime(2018, 6, 1, 4)
#June
print(x.strftime("%B"))

#3点12分
x = datetime.time(3,12,0)
```

re
```
# re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。
# 使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。
re.match(pattern, string, flags=0)
re.search(pattern, string, flags=0)

line = "Cats are smarter than dogs";
# Python的r前缀，就不用考虑转义的问题了
searchObj = re.search( r'(.*) are (.*?) .*', line, re.M|re.I)

searchObj.group() #Cats are smarter than dogs
searchObj.group(1) #Cats
searchObj.group(2) #smarter
```
