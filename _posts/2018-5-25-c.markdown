---
layout: post
title:  "c"
date:   2018-5-25 20:35:35 +0800
categories: command
---

位运算符

```

// 位与 两个位都为1时，结果才为1
&

// 位或 两个位都为0时，结果才为0
|

// 位异或 两个位相同位0，相异为1
^

// 位取反 0变1，1变0
~

```

结构体
```
struct Books
{
   char  title[50];
   char  author[50];
   char  subject[100];
   int   book_id;
} book;

//为了访问结构的成员，我们使用成员访问运算符（.）
int main( )
{
   Books Book1;        // 定义结构体类型 Books 的变量 Book1
   Books Book2;        // 定义结构体类型 Books 的变量 Book2
 
   // Book1 详述
   strcpy( Book1.title, "C++ 教程");
   strcpy( Book1.author, "Runoob"); 
   strcpy( Book1.subject, "编程语言");
   Book1.book_id = 12345;
 
   // Book2 详述
   strcpy( Book2.title, "CSS 教程");
   strcpy( Book2.author, "Runoob");
   strcpy( Book2.subject, "前端技术");
   Book2.book_id = 12346;
 
   // 输出 Book1 信息
   cout << "第一本书标题 : " << Book1.title <<endl;
   cout << "第一本书作者 : " << Book1.author <<endl;
   cout << "第一本书类目 : " << Book1.subject <<endl;
   cout << "第一本书 ID : " << Book1.book_id <<endl;
 
   // 输出 Book2 信息
   cout << "第二本书标题 : " << Book2.title <<endl;
   cout << "第二本书作者 : " << Book2.author <<endl;
   cout << "第二本书类目 : " << Book2.subject <<endl;
   cout << "第二本书 ID : " << Book2.book_id <<endl;
 
   return 0;
}

//指向结构体的指
struct Books *struct_pointer;
//结构变量的地址
struct_pointer = &Book1;
//指向该结构的指针访问结构的成员，需要使用->运算符
struct_pointer->title;
```

数据类型
```
char 1字节 -128～127 或 0～255
int 4字节
short int 2字节
float 4字节
double 8字节
```

auto 存储类
```
auto f=3.14;      //double
auto s("hello");  //const char*
auto z = new auto(9); // int*
auto x1 = 5, x2 = 5.0, x3='r';//错误，必须是初始化为同一类型
```

极大值，极小值的初始化
```
min = INT_MIN;
max = INT_MAX;
```

print
```
printf("ASCII value = %d, Character = %c\n", ch , ch );
```

数组
```
double balance[5] = {1000.0, 2.0, 3.4, 7.0, 50.0};
```

STL的vector用法
```
// 导入
#include <vector>

//get vector size
nums.size()

//init
//声明一个int型向量a
vector<int> a ;
//声明一个初始大小为10的向量
vector<int> a(10) ;
//声明一个初始大小为10且初始值都为1的向量
vector<int> a(10, 1) ;
//声明二维数组， 并初始化
vector<vector<int>> a(n, vector<int>(n, 0));
//声明并用向量a初始化向量b
vector<int> b(a) ;
//将a向量中从第0个到第2个(共3个)作为向量b的初始值
vector<int> b(a.begin(), a.begin()+3) ;

//对其中部分元素进行输入
cin >>a[2];
cin >>a[5];
cin >>a[6];

//全部输出
int i ;
for(i=0; i<a.size(); i++) cout<<a[i]<<" " ;

//遍历器
//全部输出
vector<int>::iterator t ;
for(t=a.begin(); t!=a.end(); t++)
    cout<<*t<<" " ;

//begin( ) 函数返回一个指向向量开头的迭代器。
a.begin();
//end( ) 函数返回一个指向向量末尾的迭代器。
a.end();

//获取向量中的元素个数
a.size()
//判断向量是否为空
a.empty()
//清空向量中的元素
a.clear()
//将1000插入到向量a的起始位置前
a.insert(a.begin(), 1000);
//将1000分别插入到向量元素位置的0-2处
a.insert(a.begin(), 3, 1000);
//a向量与b向量进行交换
b.swap(a);
//删除最后一个元素
v5.pop_back();
//加入一个元素并把它放在最后
v5.push_back(6);
//删除第四个元素
v5.erase(v5.begin() + 3);

//创建一个10*5的int型二维
vector< vector<int> > b(10, vector<int>(5)); 

//C++11 container initializer
vector<string> vs={"first", "second", "third"};
```

STL stack
```
stack <int> s; 
s.push(10); 
s.push(30); 
s.push(20); 
s.push(5); 
s.push(1); 

# 1 5 20 30 10
showstack(s);

# 5
s.size();
# 1
s.top();

s.pop;
# 5 20 30 10
showstack(s);
```

STL的pair用法 
```
//The pair container is a simple container defined in <utility> header consisting of two data elements or objects.
pair (data_type1, data_type2) Pair_name;

//CPP program to illustrate pair STL
#include <iostream>
#include <utility>
using namespace std;

int main()
{
    pair <int, char> PAIR1 ;

    PAIR1.first = 100;
    PAIR1.second = 'G' ;

    cout << PAIR1.first << " " ;
    cout << PAIR1.second << endl ;

    return 0;
}
```

STL的sort用法
```
// sort algorithm example
#include <iostream>     // std::cout
#include <algorithm>    // std::sort
#include <vector>       // std::vector

bool myfunction (int i,int j) { return (i<j); }

struct myclass {
  bool operator() (int i,int j) { return (i<j);}
} myobject;

int main () {
  int myints[] = {32,71,12,45,26,80,53,33};
  std::vector<int> myvector (myints, myints+8);               // 32 71 12 45 26 80 53 33

  // using default comparison (operator <):
  std::sort (myvector.begin(), myvector.begin()+4);           //(12 32 45 71)26 80 53 33

  // using function as comp
  std::sort (myvector.begin()+4, myvector.end(), myfunction); // 12 32 45 71(26 33 53 80)

  // using object as comp
  std::sort (myvector.begin(), myvector.end(), myobject);     //(12 26 32 33 45 53 71 80)

  // print out content:
  std::cout << "myvector contains:";
  for (std::vector<int>::iterator it=myvector.begin(); it!=myvector.end(); ++it)
    std::cout << ' ' << *it;
  std::cout << '\n';

  return 0;
}
```

for
```
for (int num : nums) {
  if (ones > n / 2 || zeros > n / 2) break;
  if ((num & (1 << i)) != 0) ++ones;
  else ++zeros;
}
```

string类
```
//字符串拼接
void main(){
    string s1 = "alan";
    string s2 = "xiho";

    //alanxiho
    string s3 = s1 + s2;

    string s4 = " wahaha";

    s3.append(s4);

    //alanxiho wahaha
    cout << s3 << endl;

    system("pause");
}

//string长度
string s = "c plus plus";
int len = s.length();
cout<<len<<endl;

#include <string>
using namespace std;

//string遍历
void main(){
    string s1 = "abcdefg";

    //1、数组方式
    cout << "数组方式:" << endl;
    for (int i = 0; i < s1.length(); i++){
        cout <<s1[i] << endl;

    }

    //2、迭代方式
    cout << "迭代方式:" << endl;
    for (string::iterator it = s1.begin(); it != s1.end(); it++){

        cout<<*it<< endl;

    }

    system("pause");
}
```

C 风格字符串
```
#include <iostream>
#include <cstring>
 
using namespace std;
 
int main ()
{
   char str1[11] = "Hello";
   char str2[11] = "World";
   char str3[11];
   int  len ;
 
   // 复制 str1 到 str3
   strcpy( str3, str1);
   cout << "strcpy( str3, str1) : " << str3 << endl;
 
   // 连接 str1 和 str2
   strcat( str1, str2);
   cout << "strcat( str1, str2): " << str1 << endl;
 
   // 连接后，str1 的总长度
   len = strlen(str1);
   cout << "strlen(str1) : " << len << endl;
 
   return 0;
}
```

c class
```
#include <iostream>
 
using namespace std;
 
class Box
{
   public:
      double length;         // 长度
      double breadth;        // 宽度
      double height;         // 高度
 
      // 成员函数声明
      double getVolume(void);
      void setLength( double len );
      void setBreadth( double bre );
      void setHeight( double hei );
      Box();   // 这是构造函数声明
      ~Box();  // 这是析构函数声明
};
 
// 成员函数定义
double Box::getVolume(void)
{
    return length * breadth * height;
}
 
void Box::setLength( double len )
{
    length = len;
}
 
void Box::setBreadth( double bre )
{
    breadth = bre;
}
 
void Box::setHeight( double hei )
{
    height = hei;
}
 
// 程序的主函数
int main( )
{
   Box Box1;                // 声明 Box1，类型为 Box
   Box Box2;                // 声明 Box2，类型为 Box
   double volume = 0.0;     // 用于存储体积
 
   // box 1 详述
   Box1.setLength(6.0); 
   Box1.setBreadth(7.0); 
   Box1.setHeight(5.0);
 
   // box 2 详述
   Box2.setLength(12.0); 
   Box2.setBreadth(13.0); 
   Box2.setHeight(10.0);
 
   // box 1 的体积
   volume = Box1.getVolume();
   cout << "Box1 的体积：" << volume <<endl;
 
   // box 2 的体积
   volume = Box2.getVolume();
   cout << "Box2 的体积：" << volume <<endl;
   return 0;
}
```

使用初始化列表来初始化字段
```
Line::Line( double len): length(len)
{
    cout << "Object is being created, length = " << len << endl;
}
//上面的语法等同于如下语法：
Line::Line( double len)
{
    length = len;
    cout << "Object is being created, length = " << len << endl;
}
```
lambda 表达式
```
[capture](parameters)->return-type{body}

[](int x, int y){ return x < y ; }

//无返回值
[capture](parameters){body}
[]{ ++global_x; } 

//指定返回值类型
[](int x, int y) -> int { int z = x + y; return z + x; }

//C++变量传递有传值和传引用的区别
[]      // 沒有定义任何变量。使用未定义变量会引发错误。
[x, &y] // x以传值方式传入（默认），y以引用方式传入。
[&]     // 任何被使用到的外部变量都隐式地以引用方式加以引用。
[=]     // 任何被使用到的外部变量都隐式地以传值方式加以引用。
[&, x]  // x显式地以传值方式加以引用。其余变量以引用方式加以引用。
[=, &z] // z显式地以引用方式加以引用。其余变量以传值方式加以引用。

```
